rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user's ID matches the document ID
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users can only read and update their own profile information.
    // New users are created via Firebase Authentication, not direct writes.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
    }
    
    // Public collections: Allow anyone to read data from these collections.
    // This is necessary for visitors who are not logged in to see doctors, clinics, etc.
    // Writes are disallowed for now to prevent unauthorized data modification.
    match /doctors/{doctorId} {
      allow read: if true;
      allow write: if false; // Should be managed by admins
    }

    match /clinics/{clinicId} {
      allow read: if true;
      allow write: if false; // Should be managed by admins/clinic owners
    }

    match /hospitals/{hospitalId} {
      allow read: if true;
      allow write: if false; // Should be managed by admins/hospital owners
    }

    // Diagnostics collections and subcollections should be readable by the public
    match /diagnostics/{centreId} {
      allow read: if true;
      allow write: if false; // Should be managed by admins/centre owners
      
      match /tests/{testId} {
        allow read: if true;
        allow write: if false;
      }
      
      match /pathologists/{pathologistId} {
         allow read: if true;
         allow write: if false;
      }
    }

    // Appointments:
    // Users can create their own appointments.
    // Users can read only their own appointments.
    // No updates or deletes for now to preserve record integrity.
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() && request.resource.data.patientId == request.auth.uid;
      allow read: if isOwner(request.resource.data.patientId);
      allow update, delete: if false; // More complex logic needed for status updates, etc.
    }
    
     match /testAppointments/{appointmentId} {
      allow create: if isAuthenticated() && request.resource.data.patientId == request.auth.uid;
      allow read: if isOwner(request.resource.data.patientId);
      allow update, delete: if false;
    }
  }
}
